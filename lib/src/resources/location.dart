import 'package:equatable/equatable.dart';class Location extends Equatable {  final String type;  final String subType;  final String name;  final String detailedName;  final String id;  final Self self;  final String timeZoneOffset;  final String iataCode;  final GeoCode geoCode;  final Address address;  final Analytics analytics;  const Location({    required this.type,    required this.subType,    required this.name,    required this.detailedName,    required this.id,    required this.self,    required this.timeZoneOffset,    required this.iataCode,    required this.geoCode,    required this.address,    required this.analytics,  });  factory Location.fromJson(Map<String, dynamic> json) => Location(        type: (json['type'] ?? "") as String,        subType: (json['subType'] ?? "") as String,        name: (json['name'] ?? "") as String,        detailedName: (json['detailedName'] ?? "") as String,        id: (json['id'] ?? "") as String,        self: json['self'] != null            ? Self.fromJson(json['self'] as Map<String, dynamic>)            : Self.empty,        timeZoneOffset: (json['timeZoneOffset'] ?? "") as String,        iataCode: (json['iataCode'] ?? "") as String,        geoCode: json['geoCode'] != null            ? GeoCode.fromJson(json['geoCode'] as Map<String, dynamic>)            : GeoCode.empty,        address: json['address'] != null            ? Address.fromJson(json['address'] as Map<String, dynamic>)            : Address.empty,        analytics: json['analytics'] != null            ? Analytics.fromJson(json['analytics'] as Map<String, dynamic>)            : Analytics.empty,      );  Map<String, dynamic> toJson() => {        'type': type,        'subType': subType,        'name': name,        'detailedName': detailedName,        'id': id,        'self': self.toJson(),        'timeZoneOffset': timeZoneOffset,        'iataCode': iataCode,        'geoCode': geoCode.toJson(),        'address': address.toJson(),        'analytics': analytics.toJson(),      };  @override  List<Object?> get props => [        type,        subType,        name,        detailedName,        id,        self,        timeZoneOffset,        iataCode,        geoCode,        address,        analytics,      ];}class Self extends Equatable {  final String href;  final List<String> methods;  const Self({required this.href, required this.methods});  factory Self.fromJson(Map<String, dynamic> json) => Self(        href: (json['href'] ?? "") as String,        methods: (json['methods'] ?? []) as List<String>,      );  Map<String, dynamic> toJson() => {        'href': href,        'methods': methods,      };  static Self empty = const Self(href: "", methods: []);  @override  List<Object?> get props => [href, methods];}class GeoCode extends Equatable {  final double latitude;  final double longitude;  const GeoCode({required this.latitude, required this.longitude});  factory GeoCode.fromJson(Map<String, dynamic> json) => GeoCode(        latitude: (json['latitude'] ?? 0.0) as double,        longitude: (json['longitude'] ?? 0.0) as double,      );  Map<String, dynamic> toJson() => {        'latitude': latitude,        'longitude': longitude,      };  static GeoCode empty = const GeoCode(latitude: 0.0, longitude: 0.0);  @override  List<Object?> get props => [latitude, longitude];}class Address extends Equatable {  final String cityName;  final String cityCode;  final String countryName;  final String countryCode;  final String stateCode;  final String regionCode;  const Address({    required this.cityName,    required this.cityCode,    required this.countryName,    required this.countryCode,    required this.stateCode,    required this.regionCode,  });  factory Address.fromJson(Map<String, dynamic> json) => Address(        cityName: (json['cityName'] ?? "") as String,        cityCode: (json['cityCode'] ?? "") as String,        countryName: (json['countryName'] ?? "") as String,        countryCode: (json['countryCode'] ?? "") as String,        stateCode: (json['stateCode'] ?? "") as String,        regionCode: (json['regionCode'] ?? "") as String,      );  Map<String, dynamic> toJson() => {        'cityName': cityName,        'cityCode': cityCode,        'countryName': countryName,        'countryCode': countryCode,        'stateCode': stateCode,        'regionCode': regionCode,      };  static Address empty = const Address(    cityName: "",    cityCode: "",    countryName: "",    countryCode: "",    stateCode: "",    regionCode: "",  );  @override  List<Object?> get props => [        cityName,        cityCode,        countryCode,        countryName,        stateCode,        regionCode,      ];}class Analytics extends Equatable {  final Travelers travelers;  const Analytics({required this.travelers});  factory Analytics.fromJson(Map<String, dynamic> json) => Analytics(        travelers: (json['travelers'] ?? Travelers.empty) as Travelers,      );  Map<String, dynamic> toJson() => {'travelers': travelers.toJson()};  static Analytics empty = Analytics(travelers: Travelers.empty);  @override  List<Object?> get props => [travelers];}class Travelers extends Equatable {  final int score;  const Travelers({required this.score});  factory Travelers.fromJson(Map<String, dynamic> json) => Travelers(        score: (json['score'] ?? 0) as int,      );  Map<String, dynamic> toJson() => {'score': score};  static Travelers empty = const Travelers(score: 0);  @override  List<Object?> get props => [score];}